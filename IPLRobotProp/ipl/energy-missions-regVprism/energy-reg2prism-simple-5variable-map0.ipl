import Robot_Task_Types.*;
set tasks: Task;
       
use view tasks_view_map0_wempty::TaskLibrary.fullspeed as tasklib;
// FIXME something fishy here, how was it valid with a wrong map? 

bfun distinct(int, int, int, int, int, int) -> bool;    
bfun min_int(int, int) -> int;

use model prism_noturns_nocharge_nospeed_map0(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);
// uncomment constraint on speed below if using this model:
//use model prism_noturns_nocharge_speed_map0(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);
 
stvar l: int; 
stvar s: int;
stvar b: int;

// Expected: 182 models 
forall t1: tasks | forall t2: tasks | forall t3: tasks | forall t4: tasks | forall t5: tasks | 
// cohesive path: 
	( t1::end_loc = t2::start_loc & t2::end_loc = t3::start_loc &
		t3::end_loc = t4::start_loc & t4::end_loc = t5::start_loc) & 
// no circularities/shortcuts, and the tail of the path can be empty: 
		(	
			(   
				distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc, t5::start_loc, t5::end_loc) &
				t1::task_type = 0 & t2::task_type = 0 & t3::task_type = 0 & 
				t4::task_type = 0 & t5::task_type = 0
			)  || 
			// or the last one is empty
			(
				distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc, t5::start_loc) & 
				t1::task_type = 0 & t2::task_type = 0 & t3::task_type = 0 & t4::task_type = 0 & 
				t5::task_type = 2
			) || 
			// or the last two are empty
			(  
				distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc) & 
				t1::task_type = 0 & t2::task_type = 0 & t3::task_type = 0 & 
				t4::task_type = 2 & t5::task_type = 2
			) ||
			// or the last three are empty
			( 
				distinct (t1::start_loc, t2::start_loc, t3::start_loc) &
				t1::task_type = 0 & t2::task_type = 0 & 
				t3::task_type = 2 &	t4::task_type = 2 & t5::task_type = 2
			) ||
			// or the last four are empty 
			( 
				distinct(t1::start_loc, t2::start_loc) & 
				t1::task_type = 0 & 
				t2::task_type = 2 &	t3::task_type = 2 &	t4::task_type = 2 & t5::task_type = 2 
			)
	) ->     
	// robot can find its way to the finish  
	P max=? [   
		// constrain actuation
		//(G s = 1) & 
		// robot visits each location
		(F l = t2::start_loc) &
		(F l = t3::start_loc) &
		(F l = t4::start_loc) & 
		(F l = t5::start_loc) &
		// in order
		((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U (l = t4::start_loc U (l = t5::start_loc U
			// gets to the end without draining the battery 
			( l = t5::end_loc & b > 0)
		)))))
	]{|t1::start_loc, t5::end_loc, 
		min_int(t1::energy + t2::energy + t3::energy + t4::energy + t5::energy + 1, 32560) |} = 1;
