import Robot_Task_Types.*;

import tasks_view_map1_wempty_rot.*;
use view TaskLibrary.fullspeed as tasklib;
set tasks: Task;
   
bfun distinct(int, int, int, int, int, int) -> bool;
bfun min_int(int, int) -> int; 
 
// TODO this map not useful with rotations, so validity of property does not mean much
//use model prism_noturns_nocharge_nospeed_map1(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);
// this model has heading already initialized 
//use model prism_turns_nocharge_nospeed_map3(INITIAL_LOCATION, TARGET_LOCATION, 
//	INITIAL_BATTERY, INITIAL_HEADING);

stvar l: int;
stvar s: int;
stvar b: int; 

// Expected 40 models
 
// assumptions:  
// - forward tasks have start_head = end_head
// - rotation tasks have start_loc = end_loc 
 
forall t1: tasks | forall t2: tasks | forall t3: tasks | forall t4: tasks | forall t5: tasks |
forall r12: tasks | forall r23: tasks | forall r34: tasks | forall r45: tasks |
// forward tasks; rotation tasks with possibility of emptiness are defined below
	t1::task_type = 0 & t2::task_type = 0 & t3::task_type = 0 & t1::task_type = 0 & t5::task_type = 0 &
// cohesive path (forward) 
	t1::end_loc = t2::start_loc & t2::end_loc = t3::start_loc &
	t3::end_loc = t4::start_loc & t4::end_loc = t5::start_loc &
// no circularities
	distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc, t5::start_loc, t5::end_loc) &
// rotations are on the path    
	r12::start_loc = t2::start_loc & r23::start_loc = t3::start_loc & 
		r34::start_loc = t4::start_loc & r45::start_loc = t5::start_loc &
// rotation tasks connect headings of adjacent forwards (pre and post), 
// 		unless directions already match and rotation tasks are empty 
	( r12::task_type = 1 & t1::end_head = r12::start_head & r12::end_head = t2::start_head || 
		r12::task_type = 2 & t1::end_head = t2::start_head ) & 
	( r23::task_type = 1 & t2::end_head = r23::start_head & r23::end_head = t3::start_head || 
		r23::task_type = 2 & t2::end_head = t3::start_head ) &  
	( r34::task_type = 1 & t3::end_head = r34::start_head & r34::end_head = t4::start_head || 
		r34::task_type = 2 & t3::end_head = t4::start_head) &
	( r45::task_type = 1 & t4::end_head = r45::start_head & r45::end_head = t5::start_head || 
		r45::task_type = 2 & t4::end_head = t5::start_head)	
	// regression considers this a power-safe mission 
	& (t1::energy + t2::energy + t3::energy + t4::energy + t5::energy +  
			r12::energy + r23::energy + r34::energy + r45::energy + 1 <= 32560)
	->           
	// robot can find its way to the finish   
	P max=? [  
		//(G s = 1) &  
		((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U (l = t4::start_loc U (l = t5::start_loc U 
			( l = t5::end_loc & b > 0)
		))))) &
		(F l = t2::start_loc) &
		(F l = t3::start_loc) &
		(F l = t4::start_loc) &  
		(F l = t5::start_loc) 
	]{|
		t1::start_loc, t5::end_loc,
		t1::energy + t2::energy + t3::energy + t4::energy + t5::energy +  
			r12::energy + r23::energy + r34::energy + r45::energy + 1/*, 1 */
		// incorrect to do this because if > 32560 then reg rejected this mission
//		min_int(t1::energy + t2::energy + t3::energy + t4::energy + t5::energy +  
//			r12::energy + r23::energy + r34::energy + r45::energy + 1, 32560)
	  |} = 1;
	
// a quick test of existence: 	
/*exists t1:tasks | exists t2:tasks | exists r: tasks | 
	t1::task_type = 0 & t2::task_type = 0 &
	t1::end_loc = t2::start_loc & distinct(t1::start_loc, t2::end_loc) & 
	(r::task_type = 1 & t1::end_head = r::start_head & r::end_head = t2::start_head || 
		r::task_type = 3 & t1::end_head = t2::start_head
	);*/
 