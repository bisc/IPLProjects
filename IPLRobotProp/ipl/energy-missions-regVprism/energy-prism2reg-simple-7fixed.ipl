import Robot_Task_Types.*;

import tasks_view_map1_simple.*;
// this spec is also valid with:
//import tasks_manual_simple.*;
  
use view TaskLibrary.fullspeed as tasklib;
set tasks: Task;

bfun distinct(int, int, int, int, int, int, int, int) -> bool;    

//use model prism_noturns_nocharge_nospeed_map1(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);
stvar l: int;
stvar s: int;
stvar b: int;
 
// assumption: monotonicity of missions, so no point in checking smaller budgets

// Expected 32 models

forall t1: tasks | forall t2: tasks | forall t3: tasks | forall t4: tasks | forall t5: tasks | forall t6: tasks | forall t7:tasks |
// cohesive path: 
	t1::end_loc = t2::start_loc & t2::end_loc = t3::start_loc &
		t3::end_loc = t4::start_loc & t4::end_loc = t5::start_loc & 
		t5::end_loc = t6::start_loc & t6::end_loc = t7::start_loc &
// no circularities: 
		distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc, t5::start_loc, 
			t6::start_loc, t7::start_loc, t7::end_loc)
	// for any budget that is small enough 
	->  (forall eb: int |  
	// robot can find its way to the finish on this budget
		(    // constraint: no more energy then the max budget (is weaker than implication so doesn't matter)
			//(eb <= t1::energy + t2::energy + t3::energy + t4::energy + t5::energy + 1 +1) &

			(eb >= (t1::energy + t2::energy + t3::energy + t4::energy +
				t5::energy + t6::energy + t7::energy + 1	)  - 2) & 
			P max=? [  
				//(G s = 1) & 
				// no shortcuts
				(F l = t2::start_loc) &
				(F l = t3::start_loc) &  
				(F l = t4::start_loc) & 
				(F l = t5::start_loc) &
				(F l = t6::start_loc) &
				(F l = t7::start_loc) &
				// in order
				((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U (l = t4::start_loc U (l = t5::start_loc U 
					(l = t6::start_loc U (l = t7::start_loc U ( l = t7::end_loc & b > 0)))))))) 
			]{|t1::start_loc, t7::end_loc, eb |} = 1
		) // then regression model should also consider this mission possible, with some error
		-> ( eb > (t1::energy + t2::energy + t3::energy + t4::energy + 
			t5::energy + t6::energy + t7::energy + 1) - 1 ) // actual goal (doesn't provide a bottom constraint, instead a top constraint)
		);
