import Robot_Task_Types.*;
import tasks_view_map0_simple.*;

use view TaskLibrary.fullspeed as tasklib;
set tasks: Task;
 
bfun distinct(int, int, int, int, int, int) -> bool;    

//use model prism_noturns_nocharge_speed_map0(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);
stvar l: int;
stvar s: int;
stvar b: int;
  
// Expected: 40 models

forall t1: tasks | forall t2: tasks | forall t3: tasks | forall t4: tasks | forall t5: tasks |
// cohesive path: 
	t1::end_loc = t2::start_loc & t2::end_loc = t3::start_loc &
		t3::end_loc = t4::start_loc & t4::end_loc = t5::start_loc & 
// no circularities: 
		distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc, t5::start_loc, t5::end_loc)
	->    
	// robot can find its way to the finish  
	P max=? [  
		(G s = 1) &  
		((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U (l = t4::start_loc U (l = t5::start_loc U 
			( l = t5::end_loc & b > 0)
		))))) &
		(F l = t2::start_loc) &
		(F l = t3::start_loc) &
		(F l = t4::start_loc) & 
		(F l = t5::start_loc) 
	]{|t1::start_loc, t5::end_loc, t1::energy + t2::energy + t3::energy + t4::energy + t5::energy + 1 |} = 1;
	
	// very poor performance of automaton building on this one
	/*P max=? [  
		(G s = 1) & 
		((l = t1::start_loc & (F l = t2::start_loc)) U 
			(l = t2::start_loc & (F l = t3::start_loc) U 
				(l = t3::start_loc & (F l = t4::start_loc) U 
					(l = t4::start_loc & (F l = t5::start_loc) U 
						(l = t5::start_loc U 
			( l = t5::end_loc & b > 0)
		))))) 
	]*/
	// no circ old:
			/*t1::start_loc != t3::start_loc & t3::start_loc != t5::start_loc & t1::start_loc != t5::start_loc & 
		t2::start_loc != t4::start_loc & 
		t3::end_loc != t5::end_loc & 
		t1::start_loc != t5::start_loc & 
		t1::start_loc != t5::end_loc &*/