import Robot_Task_Types.*;

import tasks_view_map1_simple.*;
// this spec is also valid with:
//import tasks_manual_simple.*;

use view TaskLibrary.fullspeed as tasklib;
set tasks: Task;

bfun distinct(int, int, int, int, int, int) -> bool;    
bfun abs (int) -> int;     

//use model prism_noturns_nocharge_nospeed_map1(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);
stvar l: int;
stvar s: int; 
stvar b: int;

 // assumption: monotonicity of missions, so no point in checking budgets too small or too big

// Expected 120 models

forall err_prism : {2} | forall err_cons: {1} | 
forall t1: tasks | forall t2: tasks | forall t3: tasks | forall t4: tasks | forall t5: tasks |
// cohesive path: 
	t1::end_loc = t2::start_loc & t2::end_loc = t3::start_loc &
		t3::end_loc = t4::start_loc & t4::end_loc = t5::start_loc & 
// no circularities: 
		distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc, t5::start_loc, t5::end_loc)
	// exists such a minimal budget 
	->  (exists ebmin: int |  
	// the budget fits into the battery  
	ebmin >= 0 & ebmin <= 32560 - err_prism - 1  &
	// robot can find its way to the finish on this budget
		(// minimal budget minus prism error (= 2 here) minus 1 should always fail
			(P max=? [  
				//(G s = 1) & 
				// no shortcuts
				(F l = t2::start_loc) & (F l = t3::start_loc) &	(F l = t4::start_loc) & (F l = t5::start_loc) &
				// in order
				((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U (l = t4::start_loc U (l = t5::start_loc U 
					( l = t5::end_loc & b > 0)))))) 
			]{|t1::start_loc, t5::end_loc, ebmin - err_prism - 1 |} = 0) &
			// minimal budget plus prism error (=2 here) plus 1 should always succeed
			(P max=? [  
				//(G s = 1) & 
				// no shortcuts
				(F l = t2::start_loc) & (F l = t3::start_loc) &	(F l = t4::start_loc) & (F l = t5::start_loc) &
				// in order
				((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U (l = t4::start_loc U (l = t5::start_loc U 
					( l = t5::end_loc & b > 0)))))) 
			// constraint above guarantees no overflow over max bat
			]{|t1::start_loc, t5::end_loc, ebmin + err_prism + 1 |} = 1) &
			// min budget & regression are within consistency tolerance (= 1 here) 
			abs(ebmin - (t1::energy + t2::energy + t3::energy + t4::energy + t5::energy + 1)) <= err_cons
		));
		
