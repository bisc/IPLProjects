import Robot_Task_Types.*;

use view tasks_view_map0_simple_char::TaskLibrary.fullspeed as tasklib;
set tasks: Task;
   
bfun distinct(int, int, int, int, int, int) -> bool;    

var MAX_BATTERY: int = 32560;
var CHARGING_THRES: int = 1500; 
      
use model prism_noturns_chargesmall_nospeed_map0(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);
stvar l: int; 
stvar s: int;
stvar b: int;    

// Expected: 99 models (ok because it's difficult to find long fixed paths)
forall t1: tasks | forall t2: tasks | forall t3: tasks | forall t4: tasks | forall t5: tasks | forall t6: tasks | forall t7: tasks |
// cohesive path: 
	t1::end_loc = t2::start_loc & t2::end_loc = t3::start_loc &
		t3::end_loc = t4::start_loc & t4::end_loc = t5::start_loc & 
		t5::end_loc = t6::start_loc & t6::end_loc = t7::start_loc &
	// "no circularities" expressed as "no intersecting task"
	// no such intersector task
	not (exists i : tasks | 
		// that is one of the legit tasks  
		( i = t1 || i = t2 || i = t3 || i = t4 || i = t5 || i = t6 || i = t7 ) & i::task_type = 0 &
		// and its end is one of the other legit tasks -- or the absolute beginning
		(    
			(t1 != i & t1::task_type = 0 & t1::end_loc = i::end_loc) ||
			(t2 != i & t2::task_type = 0 & t2::end_loc = i::end_loc) ||
			(t3 != i & t3::task_type = 0 & t3::end_loc = i::end_loc) || 
			(t4 != i & t4::task_type = 0 & t4::end_loc = i::end_loc) || 
			(t5 != i & t5::task_type = 0 & t5::end_loc = i::end_loc) ||
			(t6 != i & t6::task_type = 0 & t6::end_loc = i::end_loc) ||
			(t7 != i & t7::task_type = 0 & t7::end_loc = i::end_loc) ||
			(i::end_loc = t1::start_loc)    
		)
	) &  
	// "no charging when battery is above 1500" (specific number to map 0 & this model)
	// equivalent to "if charging is happening now, then the tail required energy is <= 1500"
	(
		(t1::task_type = 3 -> t2::energy + t3::energy + t4::energy + t5::energy + t6::energy + t7::energy < CHARGING_THRES) &
		(t2::task_type = 3 -> t3::energy + t4::energy + t5::energy + t6::energy + t7::energy < CHARGING_THRES) & 
		(t3::task_type = 3 -> t4::energy + t5::energy + t6::energy + t7::energy < CHARGING_THRES) &
		(t4::task_type = 3 -> t5::energy + t6::energy + t7::energy < CHARGING_THRES) &
		(t5::task_type = 3 -> t6::energy + t7::energy < CHARGING_THRES) &
		(t6::task_type = 3 -> t7::energy < CHARGING_THRES)
	) & 
	// the last task is not charging (does not make domain-specific sense)
	t7::task_type != 3 &
	// regression considers this a power-safe mission (remember that charging task energies are negative) 
	t1::energy + t2::energy + t3::energy + t4::energy + t5::energy + t6::energy + t7::energy + 1 <= MAX_BATTERY &
	// starting with a non-negative battery level (otherwise prism freaks out)
	t1::energy + t2::energy + t3::energy + t4::energy + t5::energy + t6::energy + t7::energy + 1 >= 0 
	->  
		P max=? [  
			(F l = t2::start_loc) &
			(F l = t3::start_loc) &
			(F l = t4::start_loc) & 
			(F l = t5::start_loc) &
			(F l = t6::start_loc) & 
			(F l = t7::start_loc) &
			((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U
				 (l = t4::start_loc U (l = t5::start_loc U (l = t6::start_loc U (l = t7::start_loc U 
				 	( l = t7::end_loc & b > 0)
			)))))))
	]{|t1::start_loc, t7::end_loc, t1::energy + t2::energy + t3::energy + t4::energy + t5::energy + t6::energy + t7::energy + 1 |} = 1;    
 
