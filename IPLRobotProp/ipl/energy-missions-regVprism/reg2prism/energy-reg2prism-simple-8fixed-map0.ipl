import Robot_Task_Types.*;
// this spec is also valid with:
//import tasks_manual_simple.*;
   
use view tasks_view_map0_simple::TaskLibrary.fullspeed as tasklib;
set tasks: Task;

bfun distinct(int, int, int, int, int, int, int, int, int) -> bool;    
var MAXBAT: int = 32560; 

use model prism_noturns_nocharge_nospeed_map0(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);
stvar l: int;
stvar s: int;
stvar b: int;

// Expected 0 models (this formula is trivially true and is discharged by rigid checking)

forall t1: tasks | forall t2: tasks | forall t3: tasks | forall t4: tasks | forall t5: tasks | forall t6: tasks | forall t7: tasks |  forall t8: tasks |
// cohesive path: 
	t1::end_loc = t2::start_loc & t2::end_loc = t3::start_loc &
		t3::end_loc = t4::start_loc & t4::end_loc = t5::start_loc &
		t5::end_loc = t6::start_loc & t6::end_loc = t7::start_loc &
		t7::end_loc = t8::start_loc & 
// no circularities: 
	distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc, t5::start_loc, t6::start_loc, t7::start_loc, t8::start_loc, t8::end_loc) &
// less than the maximum battery capacity 
	(t1::energy + t2::energy + t3::energy + t4::energy + t5::energy + 
		    t6::energy + t7::energy + t8::energy + 1 <= MAXBAT)
	->    
	// robot can find its way to the finish  
	P max=? [  
		// in order
		((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U 
			(l = t4::start_loc U (l = t5::start_loc U (l = t6::start_loc U ( l = t7::start_loc U (l = t8::start_loc U
			// gets to the end without draining the battery 
			( l = t8::end_loc & b > 0) 
		)))))))) &
		(F l = t2::start_loc) &
		(F l = t3::start_loc) &
		(F l = t4::start_loc) & 
		(F l = t5::start_loc) &
		(F l = t6::start_loc) &
		(F l = t7::start_loc) &
		(F l = t8::start_loc) 
	]{|t1::start_loc, t7::end_loc, t1::energy + t2::energy + t3::energy + t4::energy + t5::energy + 
		    t6::energy + t7::energy + t8::energy + 1 |} = 1;
