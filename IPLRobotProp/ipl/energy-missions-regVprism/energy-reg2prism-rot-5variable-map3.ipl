import Robot_Task_Types.*;
 
import tasks_view_map3_wempty_rot.*;
use view TaskLibrary.fullspeed as tasklib;
set tasks: Task;  
     	 
bfun distinct(int, int, int, int, int, int) -> bool;
bfun min_int(int, int) -> int;
 
//use model prism_turns_nocharge_nospeed_map3(
//	INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY, INITIAL_HEADING);

stvar l: int;
stvar s: int;
stvar b: int; 

// assumptions: 
// - forward tasks have start_head = end_head
// - rotation tasks have start_loc = end_loc 
// - need not rotate when arriving at mission's goal
// - in prism model, cannot move without turning/taking turn into acct
// - (optional) initial heading faces the same direction as the first step

// modeling choice: 
//	- empty steps can only be found in the end of a mission  (otherwise, the rotation task spec below would allow too many fake turns  
 
// Expected 182 models with single heading on map 1
	// ?? on map 3
 
// TODO missing variable t1? or fix the anon set procedure
	//forall initHead: {0, 1, 2, 3, 4, 5, 6, 7} |   // a full-scale version, but takes too long
forall t1: tasks | forall t2: tasks | forall t3: tasks | forall t4: tasks | forall t5: tasks |
	//forall initHead: { t1::start_head } | // a reduced version, see assumption 
	//forall r01: tasks | 	
// rotations between forward tasks
forall r12: tasks | forall r23: tasks | forall r34: tasks | forall r45: tasks | 
// a fixed heading, see assumption
	//initHead = t1::start_head & 
// cohesive path (forward)  
	t1::end_loc = t2::start_loc & t2::end_loc = t3::start_loc &
		t3::end_loc = t4::start_loc & t4::end_loc = t5::start_loc &
// rotations are located on the path 
	//r01::start_loc = t1::start_loc & 
	r12::start_loc = t2::start_loc & r23::start_loc = t3::start_loc & 
		r34::start_loc = t4::start_loc & r45::start_loc = t5::start_loc &
// no circularities/shortcuts for the first part, and the tail of the path must be empty
// every task moves to a new spot unless empty
// no empty followed by legit forward
	(
		// no empty steps
		(distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc, t5::start_loc, t5::end_loc) & 
			t1::task_type = 0 & t2::task_type = 0 & t3::task_type = 0 & t4::task_type = 0 & t5::task_type = 0)
		|| 
		// one empty step
		(distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc, t5::start_loc) &
			t1::task_type = 0 & t2::task_type = 0 & t3::task_type = 0 & t4::task_type = 0 
				& t5::task_type = 2)
		|| 
		// two empty steps
		(distinct (t1::start_loc, t2::start_loc, t3::start_loc, t4::start_loc) &
			t1::task_type = 0 & t2::task_type = 0 & t3::task_type = 0 
				& t4::task_type = 2 & t5::task_type = 2)
		||
		// three empty steps
		(distinct (t1::start_loc, t2::start_loc, t3::start_loc) &
			t1::task_type = 0 & t2::task_type = 0 &  
				t3::task_type = 2 & t4::task_type = 2 & t5::task_type = 2)
		||
		// four empty steps
		(distinct (t1::start_loc, t2::start_loc) &
			t1::task_type = 0 & 
				t2::task_type = 2 &	t3::task_type = 2 & t4::task_type = 2 & t5::task_type = 2)
	) & 
// rotation tasks connect headings of adjacent forwards (pre and post), with exclusions for empty ones
// 3 options are possible: 
//      1. legit next forward + legit rotation + matching rotation to both forwards
//  	2. legit next forward + empty rotation + matching headings of forwards
//		3. empty next forward + empty rotation
	// first rotation: either a legit or empty one
//	( r01::task_type = 1 & initHead = r01::start_head & r01::end_head = t1::start_head ||
//	  r01::task_type = 2 & initHead = t1::start_head) &  
	( t2::task_type = 0 & r12::task_type = 1 & t1::end_head = r12::start_head & r12::end_head = t2::start_head || 
	  t2::task_type = 0 & r12::task_type = 2 & t1::end_head = t2::start_head || 
	  t2::task_type = 2 & r12::task_type = 2 ) &   
	( t3::task_type = 0 & r23::task_type = 1 & t2::end_head = r23::start_head & r23::end_head = t3::start_head || 
	  t3::task_type = 0 & r23::task_type = 2 & t2::end_head = t3::start_head || 
	  t3::task_type = 2 & r23::task_type = 2) &  
	( t4::task_type = 0 & r34::task_type = 1 & t3::end_head = r34::start_head & r34::end_head = t4::start_head || 
	  t4::task_type = 0 & r34::task_type = 2 & t3::end_head = t4::start_head ||
	  t4::task_type = 2 & r34::task_type = 2) &
	( t5::task_type = 0 & r45::task_type = 1 & t4::end_head = r45::start_head & r45::end_head = t5::start_head || 
	  t5::task_type = 0 & r45::task_type = 2 & t4::end_head = t5::start_head ||
	  t5::task_type = 2 & r45::task_type = 2) & 
	  	// regression considers this a power-safe mission 
	t1::energy + t2::energy + t3::energy + t4::energy + t5::energy +  
			r12::energy + r23::energy + r34::energy + r45::energy + 1 <= 32560
	->  
	// robot can find its way to the finish   
	P max=? [  
		//(G s = 1) &  
		((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U (l = t4::start_loc U (l = t5::start_loc U 
			( l = t5::end_loc & b > 0)
		))))) &
		(F l = t2::start_loc) &
		(F l = t3::start_loc) &
		(F l = t4::start_loc) &  
		(F l = t5::start_loc) 
	]{|t1::start_loc, t5::end_loc,  t1::energy + t2::energy + t3::energy + t4::energy + t5::energy +  
			// r01::energy +
			r12::energy + r23::energy + r34::energy + r45::energy + 1, t1::start_head
		// incorrect to do this because if > 32560 then reg rejected this mission
		/*min_int(t1::energy + t2::energy + t3::energy + t4::energy + t5::energy +  
			r12::energy + r23::energy + r34::energy + r45::energy + 1, 32560)*/|} = 1;
 