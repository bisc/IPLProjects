import Robot_Task_Types.*;
    
use view tasks_view_map3b_wempty_rot_char::TaskLibrary.fullspeed as tasklib;
set tasks: Task;  

bfun distinct(int, int, int, int, int, int, int, int) -> bool;    
bfun abs (int) -> int; 
  
var err_prism: int = 2; // by how much prism can be inaccurate by itself (from ground truth). Does not affect verification times.
var err_cons: int = 0; // by how much prism can deviate from regression. Affects verification times. 
    
// with charging
use model prism_turns_chargesmall_nospeed_map3b(
	INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY, INITIAL_HEADING);

stvar l: int;
stvar s: int; 
stvar b: int;
 
var MAX_BATTERY: int = 32560;
 
// assumption: monotonicity of missions, so no point in checking budgets too small or too big
// assumption: empty tasks have their start = end

// An integration property to establish two-way consistency between Prism energy and regression mdl energy
// uses 2 flex clauses 
// Expected: 
// - partial quant removal: this property doesn't verify (the first SMT gets to 9 GB RAM in a couple of minutes)
// - full quant removal: over 200 models, did not wait to terminate

// TODO maybe have two different sorts with appropriate task types? that would necessitate the view
// FIXME what is preventing empty tasks in the end? 
// forward tasks:
forall t1: tasks | forall t2: tasks | forall t3: tasks | forall t4: tasks | forall t5: tasks | 
// rotations between forward tasks
forall r12: tasks | forall r23: tasks | forall r34: tasks | forall r45: tasks | 
// cohesive path (forward)
	t1::end_loc = t2::start_loc & t2::end_loc = t3::start_loc &
		t3::end_loc = t4::start_loc & t4::end_loc = t5::start_loc & 
		// rotations are located on the path 
		r12::start_loc = t2::start_loc & r23::start_loc = t3::start_loc & 
		r34::start_loc = t4::start_loc & r45::start_loc = t5::start_loc &
// "no circularities" expressed as "no intersecting task"
	// no such intersector task
	(not (exists i : tasks | 
		// that is one of the legit tasks  
		( i = t1 || i = t2 || i = t3 || i = t4 || i = t5 ) & i::task_type = 0 &
		// and its end is one of the other legit tasks -- or the absolute beginning
		(    
			(t1 != i & t1::task_type = 0 & t1::end_loc = i::end_loc) ||
			(t2 != i & t2::task_type = 0 & t2::end_loc = i::end_loc) ||
			(t3 != i & t3::task_type = 0 & t3::end_loc = i::end_loc) || 
			(t4 != i & t4::task_type = 0 & t4::end_loc = i::end_loc) || 
			(t5 != i & t5::task_type = 0 & t5::end_loc = i::end_loc) ||
			(i::end_loc = t1::start_loc)    
		)
	)) &
	
// "rotations are properly aligned" (also considers charging tasks)
	// if a task is a legit forward, then the previous legit task (either rot or fwd) left the robot with an appropriate heading
	// doing something hacky: constrain underspecified orientations of charging tasks 
	// 		this breaks information hiding with SMT 
	
	// 2 options are possible if a forward task isn't empty (i.e., it's fwd or charge): 
	//      1. legit rotation task + matching heading to both forwards
	//  	2. empty rotation task + same headings of forwards
	(t2::task_type != 2 -> // should work even if it's a charging task
		r12::task_type = 1 & t1::end_head = r12::start_head & t2::start_head = r12::end_head ||
		r12::task_type = 2 & t1::end_head = t2::start_head 
	) & 
	(t3::task_type != 2 -> 
		r23::task_type = 1 & t2::end_head = r23::start_head & t3::start_head = r23::end_head ||
		r23::task_type = 2 & t2::end_head = t3::start_head
	) &
	(t4::task_type != 2 -> 
		r34::task_type = 1 & t3::end_head = r34::start_head & t4::start_head = r34::end_head ||
		r34::task_type = 2 & t3::end_head = t4::start_head
	) &
	(t5::task_type != 2 -> 
		r45::task_type = 1 & t4::end_head = r45::start_head & t5::start_head = r45::end_head ||
		r45::task_type = 2 & t4::end_head = t5::start_head
	) &
	
// "the last task is not charging" (does not make domain-specific sense)
// where last is defined as either the very last one or the one before a sequence of empty tasks
	t5::task_type != 3 & 
	(t4::task_type = 3 -> t5::task_type != 2) &
	(t3::task_type = 3 -> t4::task_type != 2) &
	(t2::task_type = 3 -> t3::task_type != 2) &
	(t1::task_type = 3 -> t2::task_type != 2) &
	
// "no charging when battery is full" (specific to this map/model)
// equivalent to "if charging is happening now, then the tail required energy less than full"
// TODO check if this inequality works well when subsequent tasks are charging
	(
		(t1::task_type = 3 -> t2::energy + t3::energy + t4::energy + t5::energy + 
			r12::energy + r23::energy + r34::energy + r45::energy < MAX_BATTERY
		) &
		(t2::task_type = 3 -> t3::energy + t4::energy + t5::energy +  
			r23::energy + r34::energy + r45::energy < MAX_BATTERY
		) & 
		(t3::task_type = 3 -> t4::energy + t5::energy + r34::energy + r45::energy < MAX_BATTERY) &
		(t4::task_type = 3 -> t5::energy + r45::energy < MAX_BATTERY)
	)
	// exists such a minimal budget
	 ->  (exists ebmin: int |  
		// the budget fits into the battery  
	ebmin >= 0 & ebmin <= 32560 - err_prism - 1  &
	// robot can find its way to the finish on this budget 
		(// minimal budget minus prism error should always fail
			(P max=? [  
				//(G s = 1) & 
				// no shortcuts
				(F l = t2::start_loc) & (F l = t3::start_loc) &	(F l = t4::start_loc) & (F l = t5::start_loc) &
				// in order
				((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U (l = t4::start_loc U (l = t5::start_loc U 
					( l = t5::end_loc & b > 0))))))
			]{|t1::start_loc, t5::end_loc, ebmin - err_prism,  t1::start_head |} = 0) &
			// minimal budget plus prism error plus 1 (for battery bug) should always succeed
			(P max=? [  
				//(G s = 1) & 
				// no shortcuts
				(F l = t2::start_loc) & (F l = t3::start_loc) &	(F l = t4::start_loc) & (F l = t5::start_loc) &
				// in order
				((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U (l = t4::start_loc U (l = t5::start_loc U 
					( l = t5::end_loc & b > 0))))))
				// constraint above guarantees no overflow over max bat
			]{|t1::start_loc, t5::end_loc, ebmin + err_prism + 1, t1::start_head |} = 1) &
			// min budget & regression are within consistency tolerance (= 1 here) 
			// this constraint determines the spread of ebmin and proportionally affects the size of verification space
			abs(ebmin - (t1::energy + t2::energy + t3::energy + t4::energy + t5::energy +
				r12::energy + r23::energy + r34::energy + r45::energy + 1)) <= err_cons
		));
		
