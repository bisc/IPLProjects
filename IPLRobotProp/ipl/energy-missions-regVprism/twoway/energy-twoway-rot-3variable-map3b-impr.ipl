import Robot_Task_Types.*;
import tasks_view_map3b_wempty_rot.*;
    
use view TaskLibrary.fullspeed as tasklib;
set tasks: Task;  

bfun distinct(int, int, int, int, int, int, int, int) -> bool;    
bfun abs (int) -> int; 

var MAXBAT: int = 32560;
var err_prism: int = 2; // by how much prism can be inaccurate by itself (from ground truth). Does not affect verification times.
var err_cons: int = 0; // by how much prism can deviate from regression. Affects verification times. 
    
//use model prism_turns_nocharge_nospeed_map3b( 
//use model prism_turns_nocharge_nospeed_map3b_consfixed(
//	INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY, INITIAL_HEADING);

stvar l: int;
stvar s: int;   
stvar b: int;
 
// assumption: monotonicity of missions, so no point in checking budgets too small or too big
// assumption: empty missions have their start = end

// An integration property to establish two-way consistency between Prism energy and regression mdl energy
// uses 2 flex clauses 
// Expected 106 models 

// TODO maybe have two different sorts with appropriate task types? that would necessitate the view 
// forward tasks:
forall t1: tasks | forall t2: tasks | forall t3: tasks | 
// rotations between forward tasks
forall r12: tasks | forall r23: tasks | 
// cohesive path (forward)
	t1::end_loc = t2::start_loc & t2::end_loc = t3::start_loc &
		// rotations are located on the path 
		r12::start_loc = t2::start_loc & r23::start_loc = t3::start_loc & 
	// no intersector task
	(not (exists i : tasks | 
		// that is one of the legit tasks  
		( i = t1 || i = t2 || i = t3 ) & i::task_type = 0 &
		// and its end is one of the other legit tasks -- or the absolute beginning
		(    
			(t1 != i & t1::task_type = 0 & t1::end_loc = i::end_loc) ||
			(t2 != i & t2::task_type = 0 & t2::end_loc = i::end_loc) ||
			(t3 != i & t3::task_type = 0 & t3::end_loc = i::end_loc) || 
			(i::end_loc = t1::start_loc)    
		)
	)) &
	// "no empty task in the middle, and if it's empty then its rotation is empty"
	// written as "if some task is empty, the next one is also empty"
	t1::task_type != 2 & // the first task is not empty (not considering empty missions)
	(t2::task_type = 2 -> t3::task_type = 2 & r12::task_type = 2) & 
	(t3::task_type = 2 -> r23::task_type = 2) & 
	
	// proper rotation connection
	(t2::task_type != 2 -> 
		r12::task_type = 1 & t1::end_head = r12::start_head & t2::start_head = r12::end_head ||
		r12::task_type = 2 & t1::end_head = t2::start_head 
	) & 
	(t3::task_type != 2 -> 
		r23::task_type = 1 & t2::end_head = r23::start_head & t3::start_head = r23::end_head ||
		r23::task_type = 2 & t2::end_head = t3::start_head
	) 
	// exists such a minimal budget
	->  (exists ebmin: int |  
		// the budget fits into the battery  
	ebmin >= 0 & ebmin <= MAXBAT - err_prism - 1  &
	// robot can find its way to the finish on this budget 
		(// minimal budget minus prism error (= 2 here) should always fail
			(P max=? [  
				//(G s = 1) & 
				// no shortcuts 
				(F l = t2::start_loc) & (F l = t3::start_loc) &
				// in order
				((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U  
					( l = t3::end_loc & b > 0))))
			]{|t1::start_loc, t3::end_loc, ebmin - err_prism,  t1::start_head |} = 0) &
			// minimal budget plus prism error (=2 here) plus 1 (for battery bug) should always succeed
			(P max=? [  
				//(G s = 1) & 
				// no shortcuts
				(F l = t2::start_loc) & (F l = t3::start_loc) &
				// in order
				((l = t1::start_loc) U (l = t2::start_loc U (l = t3::start_loc U 
					( l = t3::end_loc & b > 0))))
				// constraint above guarantees no overflow over max bat
			]{|t1::start_loc, t3::end_loc, ebmin + err_prism + 1, t1::start_head |} = 1) &
			// min budget & regression are within consistency tolerance (= 1 here) 
			// this constraint determines the spread of ebmin and proportionally affects the size of verification space
			abs(ebmin - (t1::energy + t2::energy + t3::energy + r12::energy + r23::energy + 1)) <= err_cons
		));
		
