import Robot_Task_Types.*;
import tasks_view_map0_simple.*;  
   
use view TaskLibrary.fullspeed as lib; 
use model prism_noturns_nocharge_nospeed_map0(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);

stvar l: int;
stvar b: int; 
          
set tasks : Task;                                               
  
// giving it some extra energy makes it succeed (expected: valid)
forall t1 : tasks | forall t2: tasks |     
	(t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	t1::start_loc != t2::end_loc) -> // start != finish  
		P max=? [l=t1::start_loc U (l = t1::end_loc U (l=t2::end_loc & b > 0 ))]
			{| t1::start_loc, t2::end_loc, t1::energy + t2::energy + 1|} = 1.0;
			     
// should run out of energy exactly, hence negated (expected: valid) 
not (forall t1 : tasks | forall t2: tasks |     
	(t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	t1::start_loc != t2::end_loc) -> // start != finish  
		P max=? [l=t1::start_loc U (l = t1::end_loc U (l=t2::end_loc & b > 0 ))]
			{| t1::start_loc, t2::end_loc, t1::energy + t2::energy |} = 1.0);
         
// A BUGGY PROPERTY - BATTERY DRAINS TO 0 IN ANY LAST TRANSITION
// OR is prism model buggy? 

// valid: standard one
/*forall t1 : tasks | forall t2: tasks |     
	(t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	t1::start_loc != t2::end_loc) -> // start != finish  
		P max=? [l=t1::start_loc U (l = t1::end_loc U l=t2::end_loc)]
			{| t1::start_loc, t2::end_loc, t1::energy + t2::energy |} = 1.0;*/
 
      
// A BUGGY PROPERTY - ALLOWS MULTIPLE PATHS   
        
 // somehow not valid 
/*forall t1 : tasks | forall t2: tasks |     
	(t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	t1::start_loc != t2::end_loc) -> // start != finish  
		P>0.99 [F (l =  t2::end_loc)]{| t1::start_loc, t2::end_loc, t1::energy + t2::energy |};*/
		 
// negation
/*exists t1 : tasks | forall t2: tasks |     
	t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	t1::start_loc != t2::end_loc & // start != finish  
		! P>0.99 [F (l =  t2::end_loc)]{| t1::start_loc, t2::end_loc, t1::energy + t2::energy |};*/