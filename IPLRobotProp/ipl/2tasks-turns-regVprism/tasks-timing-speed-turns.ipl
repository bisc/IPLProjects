import Robot_Task_Types.*;
import tasks_simple.*;  
   
use view TaskLibrary.fullspeed as lib;  
use model prism_speed_turns_nocharge(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);
       
stvar l: bool;             
bfun abs (real) -> real;     
 
set tasks : Task; 

// commented below because too resource-intensive; runs out of memory
 
 // an integration property    
 // valid works if starting at full speed or if time to switch speeds is = 0 
 // or if the error factor is 0.1 (not 0.05)
/*forall t1 : tasks | forall t2: tasks |      
	t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	t1::start_loc != t2::end_loc -> // start != finish
	abs (       
		R{"time"}min=?[l=t1::start_loc U (l = t1::end_loc U l=t2::end_loc)]
			{| t1::start_loc, t2::end_loc, 3000 |} - 
		(t1::duration + t2::duration)
	) <= 0.1 * (t1::duration + t2::duration);*/
                     
// negation, "bug finding"                 
/*exists  t1 : tasks | exists t2: tasks |      
	t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	t1::start_loc != t2::end_loc & // start != finish //U l=t2::end_loc)
	abs (          
		R{"time"}min=? [l=t1::start_loc U (l = t1::end_loc U l=t2::end_loc)]
			{| t1::start_loc, t2::end_loc, 3000 |} - 
		(t1::duration + t2::duration)
	) > 0.1 * (t1::duration + t2::duration); */
           
// A BUGGY PROPERTY - ALLOWS MULTIPLE PATHS   
        
 // presumably valid with 0.5, not valid with 0.05
/*forall t1 : tasks | forall t2: tasks |    
	t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	t1::start_loc != t2::end_loc -> // start != finish
	abs (     
		R{"time"}min=? [F (l =  t2::end_loc)]{| t1::start_loc, t2::end_loc, 3000 |} - 
		(t1::duration + t2::duration)
	) <= 0.05 * (t1::duration + t2::duration);*/
                
// negation, "bug finding"                
/* exists  t1 : tasks | exists t2: tasks |    
	t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	t1::start_loc != t2::end_loc & // start != finish
	abs (      
		R{"time"}min=? [F (l =  t2::end_loc)]{| t1::start_loc, t2::end_loc, 3000 |} - 
		(t1::duration + t2::duration)
	) > 0.2 * (t1::duration + t2::duration); */
 
 // VARIOUS LIMITED/CORNER CASES
 
/*exists t1 : tasks | exists t2: tasks |    
	t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	t1::start_loc != t2::end_loc & // start != finish
	abs (     
		R{"time"}min=? [F (l =  t2::end_loc)]{| t1::start_loc, t2::end_loc, 3000 |} - 
		(t1::duration + t2::duration)
	) > 0.05 * (t1::duration + t2::duration);*/   
        
 // presumably valid
/*exists t1 : tasks | exists t2: tasks |   
	t1::task_type = 1 & t2::task_type = 1 & // forward motion
	t1::end_loc = t2::start_loc & // sequential
	R{"time"}min=? [F (l =  t2::end_loc)]{| t1::start_loc, t2::end_loc, 10000 |} > 
		0.05 * (t1::duration + t2::duration); */
 
// invalid
/*exists t1 : tasks | exists t2: tasks |  
	t1::task_type = 1 & t2::task_type = 0 & 
	t1::end_loc = t2::start_loc & 
	R{"time"}min=? [F (l =  t2::end_loc)]{| t1::start_loc, t2::end_loc, 10000 |} > 
		0.05 * (t1::duration + t2::duration);*/
 
// invalid 
/*exists t1 : tasks | exists t2: tasks | 
	t1::task_type = 1 & t2::task_type = 0 & 
	t1::end_loc = t2::start_loc & 
	R{"time"}min=? [F (l = t1::start_loc)]{| 0, t2::end_loc, 10000 |} > 10;*/             
               
       
  