import Robot_Task_Types.*;

// Choose 1 out of 3 pairs of views; otherwise the scope is too large 
//use view tasks_view_map3a_simple::TaskLibrary.fullspeed as tasklib1;
//use view tasks_view_map3b_simple::TaskLibrary.fullspeed as tasklib2;

//use view tasks_view_map3a_wempty::TaskLibrary.fullspeed as tasklib1;
//use view tasks_view_map3b_wempty::TaskLibrary.fullspeed as tasklib2;

use view tasks_view_map3a_wempty_rot::TaskLibrary.fullspeed as tasklib1;
use view tasks_view_map3b_wempty_rot::TaskLibrary.fullspeed as tasklib2;

bfun isSubcomponentOf(elem, elem) -> bool;
  
set AllTasks: Task;

// "if a forward motion task is in tasklib 1, then it is in tasklib 2"
// Expected: valid for all 3 views 
// for each task in one library 
forall t1: AllTasks | isSubcomponentOf(t1, tasklib1) & t1::task_type = 0 -> 
// exists a task in another one 
	(exists t2:AllTasks | isSubcomponentOf(t2, tasklib2) & t2::task_type = 0 &
	// such that they match starts and ends
	t1::start_loc = t2::start_loc & t1::end_loc = t2::end_loc);  
	
// "if a forward motion task is in tasklib 2, then it is in tasklib 1"
// Expected: valid for all 3 views
// for each task in one library 
forall t2: AllTasks | isSubcomponentOf(t2, tasklib2) & t2::task_type = 0 -> 
// exists a task in another one 
	(exists t1:AllTasks | isSubcomponentOf(t1, tasklib1) & t1::task_type = 0 &
	// such that they match starts and ends
	t1::start_loc = t2::start_loc & t1::end_loc = t2::end_loc); 	
	
// "for matching forward tasks in two libraries, the energy is not too different" 
// Expected: valid with 200 for all 3 views, invalid with 150
forall t1: AllTasks | forall t2:AllTasks |
	// if tasks match
	isSubcomponentOf(t1, tasklib1) & t1::task_type = 0 & 
	isSubcomponentOf(t2, tasklib2) & t2::task_type = 0 & 
	t1::start_loc = t2::start_loc & t1::end_loc = t2::end_loc -> 
	// the different between their energies is bounded
	abs_int(t1::energy - t2::energy) <= 200;

// "if a rotation task is in library 1, then it is in library 2" 
// Expected: invalid for simple & wempty (unrecognized props), valid for rot
forall t1: AllTasks |
	isSubcomponentOf(t1, tasklib1) & t1::task_type = 1 -> 
	(exists t2: AllTasks |	isSubcomponentOf(t2, tasklib2) & t2::task_type = 1 & 
		t1::start_loc = t2::start_loc & 
		t1::start_head = t2::start_head &
		t1::end_head = t2::end_head);  

// "Matching rotation tasks don't take energy that is too different"
// Expected: invalid for simple & wempty (unrecognized props);  perfect matching (0) for rot
forall t1: AllTasks | forall t2:AllTasks |
	// if tasks match
	isSubcomponentOf(t1, tasklib1) & t1::task_type = 1 & 
	isSubcomponentOf(t2, tasklib2) & t2::task_type = 1 & 
	t1::start_loc = t2::start_loc & t1::start_head = t2::start_head &
	t1::end_head = t2::end_head -> 
	// the difference between their energies is bounded
	abs_int(t1::energy - t2::energy) <= 0 ;
	
	
	