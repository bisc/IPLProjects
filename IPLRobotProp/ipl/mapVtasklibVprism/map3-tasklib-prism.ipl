import Robot_Task_Types.*;
import tasks_view_map3_simple.*;
import Map_Types.*;
import map3.*;    
    
use view TaskLibrary.fullspeed as tasklib;
use view Map.i as mapp;  
set locs : Location;   
set tasks: Task;   

//use model prism_turns_nocharge_nospeed_map3(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY, INITIAL_HEADING);
stvar l: int;
stvar b: int;  

// integration properties
// assumptions: 
// - location IDs form a continuous interval  
    
// LOCATIONS: locations in prism <-> locations on map 
  
// "Each location in the map is valid in prism"
	forall loc : locs | forall initHead: {0} |                    
		P max=? [ F l = loc::id ] {| loc::id, loc::id, 1000, initHead |} = 1;

// "Each location in prism is valid on the map" 
// verification approach: 
// 	for any location with ID such that it's bigger/smaller than all the other ones, 
// 	increment/decrement one -> error

// "No locations outside the given range in Prism"
// the next two SHOULD trigger an error (nullptr exception) 
//forall locMax : locs |  forall initHead: {0} |  
//	(forall locOther: locs | locMax::id >= locOther::id)  ->  
//		P max=?[F l = locMax::id + 1] {|locMax::id +1 , locMax::id +1, 1000, initHead |} = 0;
		     
//	forall locMin : locs |  forall initHead: {0} |  
//		(forall locOther: locs | locMin::id <= locOther::id)  ->  
//			P max=?[F l = locMin::id - 1] {| locMin::id - 1 , locMin::id - 1, 1000, initHead |} = 0; 
 
// a non-error-triggering version of the above:
// "the max ID+1 location is reachable from anywhere"
// this non-reachability has a slightly different meaning 
// cannot reach the max + 1 location from any other (supposedly valid) one
	forall initHead: {0} |
	forall locInit: locs | 
	forall locMax : locs |  
		locInit != locMax & (forall locOther: locs | locMax::id >= locOther::id)  -> // 
			P max=?[F l = locMax::id + 1] {|locInit::id, locMax::id + 1, 10000, initHead |} = 0;
                 
// "cannot reach the min - 1 location from any other (supposedly valid) one"
	forall initHead: {0} |
	forall locInit: locs |                     
	forall locMin : locs | 
			locInit != locMin & (forall locOther: locs | locMin::id <= locOther::id)  -> 
				P max=?[F l = locMin::id - 1] {|locInit::id, locMin::id - 1, 10000, initHead |} = 0;
        
// EDGES: consistent between map, tasklib, and prism
// sanity checking: every map view is symmetric 
               forall l1 : locs | forall l2 : locs |
               		list_contains_archelem(l1::edges, l2) <=>
               		list_contains_archelem(l2::edges, l1);    

				// map to tasklib:  (combines two views)
				// "there is an edge in the map iff there is a pair of tasks in the task lib with the same start and end/vice versa"
				// assumption: forward motion tasks are the only ones that change your location              
               forall l1: locs | exists l2: locs |   
               //  two locations are connected iff     
               	l1 != l2 & list_contains_archelem(l1::edges, l2) <=>
               // there are tasks that let you go both ways between the locations
               			(exists t: tasks | t::start_loc = l1::id & t::end_loc = l2::id) 
               			& (exists t: tasks | t::start_loc = l2::id & t::end_loc = l1::id);
  
//           tasklib to map: 
//			 "for each task in the lib, start and end are locations on the map
               forall t: tasks | exists i : locs | exists j : locs |
               		t::start_loc = i::id & t::end_loc = j::id;   
        
//           tasklib to prism:   
//               "for each edge, prism can go from start to end in one step (excluding all other locations)"
//				energy needs to be 10k because 5k is too little given the turns
               forall initHead: {0} | forall t: tasks | 
               		P max=? [l = t::start_loc U 
							(l = t::end_loc & b>0) ]{| t::start_loc , t::end_loc, 10000, initHead |} = 1; 
 
//           prism to tasklib: 
//           "for each pair of locations without an edge, prism cannot go between locations directly"
// 			Expected: 106 models
               forall l1: locs | forall l2: locs |  forall initHead : {0} |  
               		l1!=l2 & !list_contains_archelem(l1::edges, l2) => 
               			P max=? [ l = l1::id U (l = l2::id & b>0) ] {|l1::id , l2::id, 5000, initHead |} = 0;
               			// TODO implement typechecking for model parameters


	