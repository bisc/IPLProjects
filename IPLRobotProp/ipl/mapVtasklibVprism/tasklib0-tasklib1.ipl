import Robot_Task_Types.*;

import tasks_view_map0_simple.*;
import tasks_view_map1_simple.*; 

// Choose 1 out of 3 pairs of views; otherwise the scope is too large
use view tasks_view_map0_simple::TaskLibrary.fullspeed as tasklib0;
use view tasks_view_map1_simple::TaskLibrary.fullspeed as tasklib1;

//use view tasks_view_map0_wempty::TaskLibrary.fullspeed as tasklib0;
//use view tasks_view_map1_wempty::TaskLibrary.fullspeed as tasklib1;

//use view tasks_view_map0_wempty_rot::TaskLibrary.fullspeed as tasklib0; // Does not exist yet
//use view tasks_view_map1_wempty_rot::TaskLibrary.fullspeed as tasklib1;

bfun isSubcomponentOf(elem, elem) -> bool;
bfun abs_int(int, int) -> int; 
 
set AllTasks: Task;

// "if a forward motion task is in tasklib 1, then it is in tasklib 2"
// Expected: valid
// for each task in one library 
forall t0: AllTasks | isSubcomponentOf(t0, tasklib0) & t0::task_type = 0 -> 
// exists a task in another one 
	(exists t1:AllTasks | isSubcomponentOf(t1, tasklib1) & t1::task_type = 0 &
	// such that they match starts and ends
	t0::start_loc = t1::start_loc & t0::end_loc = t1::end_loc);   
	
// "if a forward motion task is in tasklib 2, then it is in tasklib 1"
// Expected: valid
// for each task in one library 
forall t1: AllTasks | isSubcomponentOf(t1, tasklib1) & t1::task_type = 0 -> 
// exists a task in another one 
	(exists t0:AllTasks | isSubcomponentOf(t0, tasklib0) & t0::task_type = 0 &
	// such that they match starts and ends
	t0::start_loc = t1::start_loc & t0::end_loc = t1::end_loc); 	
	
// "for matching forward tasks in two libraries, the energy is not too different" 
// Expected: valid for 175, invalid for 150 (empirically established numbers) 
forall t0: AllTasks | forall t1:AllTasks |
	// if tasks match
	isSubcomponentOf(t0, tasklib0) & t0::task_type = 0 & 
	isSubcomponentOf(t1, tasklib1) & t1::task_type = 0 & 
	t0::start_loc = t1::start_loc & t0::end_loc = t1::end_loc -> 
	// the different between their energies is bounded
	abs_int(t0::energy - t1::energy) <= 175 ;

// "if a rotation task is in library 1, then it is in library 2" 
// Expected: trivially valid for simple & wempty, ?? for rot
forall t0: AllTasks |
	isSubcomponentOf(t0, tasklib0) & t0::task_type = 1 -> 
	(exists t1: AllTasks |	isSubcomponentOf(t1, tasklib1) & t1::task_type = 1 & 
		t0::start_loc = t1::start_loc & 
		t0::start_head = t1::start_head &
		t0::end_head = t1::end_head);  

// "Matching rotation tasks don't take energy that is too different"
// Expected: trivially valid for simple & wempty, ?? for rot
forall t0: AllTasks | forall t1:AllTasks |
	// if tasks match
	isSubcomponentOf(t0, tasklib0) & t0::task_type = 1 & 
	isSubcomponentOf(t1, tasklib1) & t1::task_type = 1 & 
	t0::start_loc = t1::start_loc & t0::start_head = t1::start_head &
	t0::end_head = t1::end_head -> 
	// the difference between their energies is bounded
	abs_int(t0::energy - t1::energy) <= 0 ;

