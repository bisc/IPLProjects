import Robot_Task_Types.*;
import tasks_view_map0_simple.*;
   
import Map_Types.*;
import map0.*;    
  
use view Map.i as mapp;  
set locs : Location; 

use view TaskLibrary.fullspeed as tasklib; 
set tasks: Task;

//bfun list_contains_elem(<<elem>>, elem) -> bool;
bfun list_contains_archelem(<<elem>>, elem) -> bool; 
          
//use model prism_noturns_nocharge_speed_map0(INITIAL_LOCATION, TARGET_LOCATION, INITIAL_BATTERY);
stvar l: int;
stvar b: int;    
 
// integration properties
// assumptions: 
// - location IDs form a continuous interval  
    
// LOCATIONS: locations in prism <-> locations on map 
      
// "each location in the map is valid in prism"
forall loc : locs |                   
	P max=? [ F l = loc::id ] {| loc::id, loc::id, 1000 |} = 1;
 
// "each location in prism is valid on the map" 
// verification tactic: 
// 		forall location with ID such that it's bigger/smaller than all the other ones, 
// 		increment/decrement one -> error

// Absence of locations outside the given rance in Prism
// the next two SHOULD trigger an error (nullptr exception) 
//forall locMax : locs | 
//	(forall locOther: locs | locMax::id >= locOther::id)  ->  
//		P max=?[F l = locMax::id + 1] {|locMax::id +1 , locMax::id +1, 1000 |} = 0;
		    
//forall locMin : locs | 
//	(forall locOther: locs | locMin::id <= locOther::id)  ->  
//		P max=?[F l = locMin::id - 1] {|locMin::id - 1 , locMin::id - 1, 1000 |} = 0; 

// an error-free version of the above - non-reachability (slightly different meaning) 
// "cannot reach the max + 1 location from any other (supposedly valid) one"
forall init: locs | 
	forall locMax : locs |  
		init != locMax & (forall locOther: locs | locMax::id >= locOther::id)  -> // 
			P max=?[F l = locMax::id + 1] {|init::id, locMax::id + 1, 5000 |} = 0;
  
// "cannot reach the min - 1 location from any other (supposedly valid) one"		   
forall init: locs |  	  
	forall locMin : locs |  
		init != locMin & (forall locOther: locs | locMin::id <= locOther::id)   -> 
			P max=?[F l = locMin::id - 1] {|init::id, locMin::id - 1, 5000 |} = 0;
       
// EDGES  
// sanity checking: "every map view is symmetric" 
               forall l1 : locs | forall l2 : locs |
               		list_contains_archelem(l1::edges, l2) <=>
               		list_contains_archelem(l2::edges, l1);    

// every task corresponds to an edge in prism 
          
// map to tasklib: <redundant with map0-tasklib.ipl>
// "there is an edge in the map iff there is a pair of tasks in the task lib with the same start and end/vice versa"
// combines two views
// assumption: forward motion tasks are the only ones that change your location
//               // two locations       
//               forall l1: locs | exists l2: locs |   
//               // are connected iff     
//               	l1 != l2 & list_contains_archelem(l1::edges, l2) <=>
//               // there are tasks that let you go both ways between the locations
//               			(exists t: tasks | t::start_loc = l1::id & t::end_loc = l2::id) 
//               			& (exists t: tasks | t::start_loc = l2::id & t::end_loc = l1::id);
  
//           tasklib to map: 
// 				"for each task in the lib, start and end are locations on the map"
//               forall t: tasks | exists i : locs | exists j : locs |
//               		t::start_loc = i::id & t::end_loc = j::id;   
        
//           tasklib to prism:   
//               "for each edge, prism can go from start to end in one step (excluding all other locations)"
               forall t: tasks | P max=? [l = t::start_loc U 
						(l = t::end_loc & b>0) ]{| t::start_loc , t::end_loc, 5000 |} = 1; 
 
//           prism to tasklib: <how do we know that there is no other way in prism to jump the edges?>
//               "for each pair of locations without an edge, prism cannot go between locations directly:"
// 			Expected: 53 models
               forall l1: locs | forall l2: locs |
               		l1!=l2 & !list_contains_archelem(l1::edges, l2) => 
               			P max=? [ l = l1::id U (l = l2::id & b>0) ] {|l1::id , l2::id, 5000 |} = 0;
               			 // TODO implement typechecking for model parameters

 